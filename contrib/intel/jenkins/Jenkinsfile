import groovy.transform.Field

properties([disableConcurrentBuilds(abortPrevious: true)])
def DO_RUN=1
def TARGET="main"
def SCRIPT_LOCATION="py_scripts/contrib/intel/jenkins"
def RELEASE=0
@Field def BUILD_MODES=["reg", "dbg", "dl"]
@Field def MPI_TYPES=["impi", "mpich", "ompi"]
def PYTHON_VERSION="3.9"

def run_python(version, command) {
  sh "python$version $command"
}

def slurm_batch(partition, node_num, output, command) {
  try {
    sh """timeout 3600 sbatch --partition=${partition} -N ${node_num} \
          --wait -o ${output} --open-mode=append --wrap=\'env; ${command}\'
       """
  } catch (Exception e) {
    sh "scancel \$(cat ${output} | grep SLURM_JOBID | cut -d \"=\" -f 2)"
    sh "cat ${output}"
    error("Build failed ${e}")
  }
  sh "cat ${output}"
}

def run_fabtests(stage_name, partition, node_num, prov, util=null,
                 user_env=null) {
  def command = "python3.9 runtests.py"
  def opts = "--prov=${prov} --test=fabtests"
  if (util)
    opts = "${opts} --util=${util}"

  if (user_env)
    opts = "${opts} --user_env ${user_env}"

  for (mode in BUILD_MODES) {
    echo "Running $stage_name fabtests $mode"
    slurm_batch("${partition}", "${node_num}",
                "${env.LOG_DIR}/${stage_name}_fabtests_${mode}",
                "${command} ${opts} --ofi_build_mode=${mode}")
  }

  echo "${stage_name} completed."
}

def run_middleware(providers, stage_name, test, partition, node_num, mpi=null,
                   imb_grp=null) {
  def base_cmd = "python3.9 runtests.py --test=${test}"
  def opts = ""
  def prefix = "${env.LOG_DIR}/${stage_name}_"
  def suffix = "_${test}_reg"
  if (mpi) {
    base_cmd = "${base_cmd} --mpi=${mpi}"
    suffix = "_${mpi}${suffix}"
  }

  if (imb_grp)
    base_cmd = "${base_cmd} --imb_grp=${imb_grp}"

  for (prov in providers) {
    if (prov[1]) {
      echo "Running ${prov[0]}-${prov[1]} ${stage_name}"
      opts = "--prov=${prov[0]} --util=${prov[1]}"
      output = "${prefix}${prov[0]}-${prov[1]}${suffix}"
    } else {
      echo "Running ${prov[0]} ${stage_name}"
      opts = "--prov=${prov[0]}"
      output = "${prefix}${prov[0]}${suffix}"
    }

    slurm_batch("${partition}", "${node_num}", "${output}",
                "${base_cmd} ${opts}")
  }
}

def check_target() {
  echo "CHANGE_TARGET = ${env.CHANGE_TARGET}"
  if (changeRequest()) {
    TARGET = env.CHANGE_TARGET
  }

  if (TARGET) {
    return TARGET
  }

  return "main"
}

def release() {
  def file = "${env.WORKSPACE}/commit_id"
  if (!fileExists(file)) {
    echo "CI Run has not rebased with ofiwg/libfabric. Please Rebase."
    return 1
  }

  def changes = readFile file
  def changeStrings = new ArrayList<String>()

  for (line in changes.readLines()) {
    changeStrings.add(line)
  }

  if ((changeStrings.toArray().any { it =~ /(Makefile\.am)\b/ }) ||
      (changeStrings.toArray().any { it =~ /(configure\.ac)\b/ })) {
        echo "This is probably a release"
        return 1
  }

  return 0
}

def skip() {
  def file = "${env.WORKSPACE}/commit_id"
  if (!fileExists(file)) {
    echo "CI Run has not rebased with ofiwg/libfabric. Please Rebase."
    return 1
  }

  def changes = readFile file
  def changeStrings = new ArrayList<String>()

  for (line in changes.readLines()) {
    changeStrings.add(line)
  }

  echo "Changeset is: ${changeStrings.toArray()}"
  if (changeStrings.toArray().every { it =~ /(?:fabtests\/pytests|man|prov\/efa|prov\/opx).*$/ }) {
    echo "DONT RUN!"
    return 0
  }

  if (changeStrings.isEmpty()) {
    echo "DONT RUN!"
    return 0
  }

  return 1
}

pipeline {
  agent {
    node {
      label 'main'
      customWorkspace "workspace/${JOB_NAME}/${env.BUILD_NUMBER}"
    }
  }
  options {
      timestamps()
      timeout(activity: true, time: 1, unit: 'HOURS')
  }
  environment {
      JOB_CADENCE = 'PR'
      LOG_DIR = "${env.JOB_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}/log_dir"
  }

  stages {
    stage ('opt-out') {
      steps {
        script {
          TARGET=check_target()
          sh "mkdir ${env.WORKSPACE}/py_scripts"
          sh "git clone --branch ${TARGET} ${env.UPSTREAM} ${env.WORKSPACE}/py_scripts"
          sh "${env.SKIP_PATH}/skip.sh ${env.WORKSPACE} ${TARGET}"
          sh "${env.SKIP_PATH}/release.sh ${env.WORKSPACE} ${TARGET}"
          DO_RUN=skip()
          RELEASE=release()
        }
      }
    }
    stage ('parallel-builds') {
      when { equals expected: 1, actual: DO_RUN }
      parallel {
        stage ('build') {
          steps {
            script {
              echo "Copying build dirs."
              build_item="builddir"
              command="""${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py \
                     --build_item="""
              run_python(PYTHON_VERSION, "${command}${build_item}")
              echo "Copying log dirs."
              build_item="logdir"
              if (RELEASE) {
                run_python(PYTHON_VERSION, "${command}${build_item} --release")
              } else {
                run_python(PYTHON_VERSION, "${command}${build_item}")
              }
              build_item="libfabric"
              for (mode in  BUILD_MODES) {
                echo "Building Libfabric $mode"
                build_item="libfabric"
                run_python(PYTHON_VERSION,
                           """${command}${build_item} \
                           --ofi_build_mode=$mode""")
                echo "Building Fabtests $mode"
                build_item="fabtests"
                run_python(PYTHON_VERSION,
                           """${command}${build_item} \
                           --ofi_build_mode=$mode""")
              }
            }
          }
        }
        stage ('build-daos') {
          agent {
            node {
              label 'daos'
              customWorkspace "${CB_HOME}/workspace/${JOB_NAME}/${env.BUILD_NUMBER}"
            }
          }
          steps {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
              sh """
                env
                (
                  if [[ ! -d ${env.WORKSPACE}/py_scripts ]]; then
                    mkdir ${env.WORKSPACE}/py_scripts
                  else
                    rm -rf ${env.WORKSPACE}/py_scripts && mkdir ${env.WORKSPACE}/py_scripts
                  fi

                  git clone --branch ${TARGET} ${env.UPSTREAM} ${env.WORKSPACE}/py_scripts

                  echo "Copy log dirs."
                  python3.7 ${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py --build_item=logdir
                  echo "Copy log dirs completed."
                  echo "-----------------------------------------------------"
                  python3.7 ${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py --build_item=libfabric --build_cluster='daos'
                  python3.7 ${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py --build_item=fabtests
                )
              """
            }
          }
        }
        stage ('build-dsa') {
          agent {
            node {
              label 'dsa'
              customWorkspace "${CB_HOME}/workspace/${JOB_NAME}/${env.BUILD_NUMBER}"
            }
          }
          steps {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
              sh """
                env
                (
                  if [[ ! -d ${env.WORKSPACE}/py_scripts ]]; then
                    mkdir ${env.WORKSPACE}/py_scripts
                  else
                    rm -rf ${env.WORKSPACE}/py_scripts && mkdir ${env.WORKSPACE}/py_scripts
                  fi
                  git clone --branch ${TARGET} ${env.UPSTREAM} ${env.WORKSPACE}/py_scripts
                  python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py --build_item=logdir
                  python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py --build_item=libfabric --build_cluster='dsa'
                  python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py --build_item=fabtests
                )
              """
            }
          }
        }
      }
    }
    stage('parallel-tests') {
      when { equals expected: 1, actual: DO_RUN }
      parallel {
        stage('MPI_verbs-rxm') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                def providers = [["verbs", "rxm"]]
                for (mpi in MPI_TYPES) {
                  for (imb_grp = 1; imb_grp < 4; imb_grp++) {
                    run_middleware(providers, "MPI", "IMB",
                                   "squirtle,totodile", "2", "${mpi}",
                                   "${imb_grp}")
                  }
                  run_middleware(providers, "MPI", "osu", "squirtle,totodile",
                                 "2", "${mpi}")
                }
              }
            }
          }
        }
        stage('MPI_tcp-rxm') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                def providers = [["tcp", "rxm"]]
                for (mpi in MPI_TYPES) {
                  for (imb_grp = 1; imb_grp < 4; imb_grp++) {
                    run_middleware(providers, "MPI", "IMB",
                                   "bulbasaur", "2", "${mpi}", "${imb_grp}")
                  }
                  run_middleware(providers, "MPI", "osu", "bulbasaur", "2",
                                 "${mpi}")
                }
              }
            }
          }
        }
        stage('tcp') {
           steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("tcp", "bulbasaur", "2", "tcp")
              }
            }
          }
        }
        stage('verbs-rxm') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("verbs-rxm", "squirtle,totodile", "2", "verbs",
                             "rxm")
              }
            }
          }
        }
        stage('verbs-rxd') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("verbs-rxd", "squirtle", "2", "verbs",
                             "rxd")
              }
            }
          }
        }
        stage('udp') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("udp", "bulbasaur", "2", "udp")
              }
            }
          }
        }
        stage('shm') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("shm", "bulbasaur", "1", "shm")
                run_fabtests("shm", "bulbasaur", "1", "shm", null,
                            "FI_SHM_DISABLE_CMA=1")
              }
            }
          }
        }
        stage('sockets') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("sockets", "bulbasaur", "2", "sockets")
              }
            }
          }
        }
        stage('ucx') {
          steps {
            script {
             command="""${env.WORKSPACE}/${SCRIPT_LOCATION}/build.py \
                      --ucx --build_item="""
              for (mode in  BUILD_MODES) {
                echo "Building Libfabric $mode"
                build_item="libfabric"
                run_python(PYTHON_VERSION,
                           """${command}${build_item} \
                           --ofi_build_mode=$mode""")
                echo "Building Fabtests $mode"
                build_item="fabtests"
                run_python(PYTHON_VERSION,
                           """${command}${build_item} \
                           --ofi_build_mode=$mode""")
              }
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("ucx", "totodile", "2", "ucx")
              }
            }
          }
        }
        stage('psm3') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_fabtests("psm3", "squirtle", "2", "psm3", null,
                            "PSM3_IDENTIFY=1")
              }
            }
          }
        }
        stage('mpichtestsuite') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                def providers = [["verbs", "rxm"], ["tcp", null],
                                 ["tcp", "rxm"], ["sockets", null]]
                for (mpi in MPI_TYPES) {
                  run_middleware(providers, "mpichtestsuite", "mpichtestsuite",
                                 "squirtle,totodile", "2", "${mpi}")
                }
              }
            }
          }
        }
        stage('SHMEM') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_middleware([["verbs", null], ["tcp", null],
                                ["sockets", null]], "SHMEM", "shmem",
                                "squirtle,totodile", "2")
              }
            }
          }
        }
        stage ('multinode_performance') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_middleware([["tcp", null]], "multinode_performance",
                               "multinode", "bulbasaur", "2")
              }
            }
          }
        }
        stage ('oneCCL') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_middleware([["tcp", "rxm"]/*, ["psm3", null]*/], "oneCCL",
                               "oneccl", "bulbasaur", "2")
              }
            }
          }
        }
        stage ('oneCCL-GPU') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                run_middleware([["verbs", "rxm"]], "oneCCL-GPU", "onecclgpu",
                               "charmander", "2")
              }
            }
          }
        }
        stage('daos_tcp') {
          agent {
            node {
              label 'daos'
              customWorkspace "${CB_HOME}/workspace/${JOB_NAME}/${env.BUILD_NUMBER}"
            }
          }
          options { skipDefaultCheckout() }
          steps {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
              sh """
                env
                (
                  echo `hostname`
                  cd ${env.WORKSPACE}/${SCRIPT_LOCATION}/
                  python3.7 runtests.py --prov='tcp' --util='rxm' --test=daos
                  echo "daos-tcp test completed."
                )
              """
            }
          }
        }
        stage('daos_verbs') {
          agent {
            node {
              label 'daos'
              customWorkspace "${CB_HOME}/workspace/${JOB_NAME}/${env.BUILD_NUMBER}"
            }
          }
          options { skipDefaultCheckout() }
          steps {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
              sh """
                env
                (
                  echo `hostname` 
                  cd ${env.WORKSPACE}/${SCRIPT_LOCATION}/
                  python3.7 runtests.py --prov='verbs' --util='rxm' --test=daos
                  echo "daos-verbs test completed."
                )
              """
            }
          }
        }
        stage ('ze-shm') {
          steps {
            script {
              dir ("${env.WORKSPACE}/${SCRIPT_LOCATION}/") {
                def providers = [["shm", null]]
                def base_cmd = "python3.9 runtests.py --device=ze"
                def prefix = "${env.LOG_DIR}/ze-shm_"
                def suffix = "_reg"
                for (prov in providers) {
                  if (prov[1]) {
                    echo "Running ${prov[0]}-${prov[1]} ze-shm"
                    slurm_batch("charmander", "1",
                                "${prefix}${prov[0]}-${prov[1]}${suffix}",
                                """${base_cmd} --prov=${prov[0]} \
                                --util=${prov[1]}""")
                  } else {
                    echo "Running ${prov[0]} ze-shm"
                    slurm_batch("charmander", "1",
                                "${prefix}${prov[0]}${suffix}",
                                "${base_cmd} --prov=${prov[0]}")
                  }
                }
              }
            }
          }
        }
        stage('dsa') {
          agent {
            node {
              label 'dsa'
              customWorkspace "${CB_HOME}/workspace/${JOB_NAME}/${env.BUILD_NUMBER}"
            }
          }
          when { equals expected: 1, actual: DO_RUN }
          steps {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
              sh """
              env
              (
                echo `hostname`
                cd ${env.WORKSPACE}/${SCRIPT_LOCATION}/
                python3.9 runtests.py --prov=shm --test=fabtests --user_env FI_SHM_DISABLE_CMA=1 FI_SHM_USE_DSA_SAR=1
              )
              """
            }
          }
        }
      }
    }
    stage ('Summary') {
      when { equals expected: 1, actual: DO_RUN }
      steps {
        withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
          sh """
            env
            (
              if [[ $RELEASE -eq 1 ]]; then
                python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/summary.py --summary_item=all --release
              else
                python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/summary.py --summary_item=all
              fi
              echo "------------"
              if [[ ${RELEASE} -eq 1 ]]; then
                mkdir -p ${env.WORKSPACE}/internal
                rm -rf ${env.WORKSPACE}/internal/*
                git clone https://${env.PAT}@github.com/${env.INTERNAL} ${env.WORKSPACE}/internal
                cd ${env.WORKSPACE}/internal
                mkdir -p ${env.WORKSPACE}/internal/summaries
                cp ${env.WORKSPACE}/summary_*.log ${env.WORKSPACE}/internal/summaries/
                git add ${env.WORKSPACE}/internal/summaries/
                git commit -am \"add ${env.JOB_NAME}'s summary\"
                git pull -r origin master
                git push origin master
              fi
            )
          """
        }
      }
    }
    stage ('Summary-daos') {
      agent {node {label 'daos'}}
      when { equals expected: 1, actual: DO_RUN }
      steps {
        withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
          sh """
            env
            (
              python3.7 ${env.WORKSPACE}/${SCRIPT_LOCATION}/summary.py --summary_item=daos
            )
          """
        }
      }
    }
  }

  post {
    always {
      withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
        sh "python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/summary.py --summary_item=all"
      }
    }
    success {
      node ('daos') {
        withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
            sh """
              if [[ ${DO_RUN} -eq 1 ]]; then
                python3.7 ${env.WORKSPACE}/${SCRIPT_LOCATION}/summary.py -v --summary_item=daos
              fi
            """
          dir ("${env.DAOS_CLUSTER_HOME}/avocado") {
            deleteDir()
          }
        }
      }
      withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
        dir("${env.WORKSPACE}") {
          sh "python3.9 ${env.WORKSPACE}/${SCRIPT_LOCATION}/summary.py -v --summary_item=all"
        }
      }
    }
    cleanup {
      node ('daos') {
        withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
          dir ("${env.JOB_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}") {
            deleteDir()
          }
          dir("${env.WORKSPACE}") {
            deleteDir()
          }
          dir("${env.WORKSPACE}@tmp") {
            deleteDir()
          }
        }
      }
      node ('dsa') {
        withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
          dir ("${env.JOB_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}") {
            deleteDir()
          }
          dir("${env.WORKSPACE}") {
            deleteDir()
          }
          dir("${env.WORKSPACE}@tmp") {
            deleteDir()
          }
        }
      }
      withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
        dir ("${env.JOB_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}") {
          deleteDir()
        }
        dir("${env.WORKSPACE}") {
          deleteDir()
        }
        dir("${env.WORKSPACE}@tmp") {
          deleteDir()
        }
      }
    }
  }
}
